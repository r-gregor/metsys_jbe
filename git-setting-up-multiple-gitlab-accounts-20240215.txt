filename: git_setting-up-multiple-gitlab-accounts_20240215.txt
https://medium.com/uncaught-exception/setting-up-multiple-gitlab-accounts-82b70e88c437

Setting up multiple GitLab accounts
Dec 19, 2017

     Update, 2019-03-07: I've published an updated version of this article, which you can check it out
     in the following link:

[**1]Setting up multiple GitHub accounts, the nicer way

Walks through how to setup Git to support multiple accounts - from committing using the correct email to
pushing as the...

   Here's a scenario: you want to use multiple GitLab (or GitHub, etc.) on your machine. One could be
   your personal account and another one you use specifically for work. You want to use different SSH
   keys to access the repositories in either account.

   Here's how to achieve that setup properly. For this article, let's assume we have the two GitLab
   accounts:
     * Personal Account, username: personal, email: personal@email.com
     * Work Account, username: work, email: work@email.com

Generate SSH keys for each user
   GitLab does not allow you to use the same SSH key in multiple accounts, so you'll have to create
   separate keys for each account. You can create SSH keys and add them to your SSH agent by following
   [https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/]this guide from
   the GitHub Documentation.

   Once you're done, you will have two sets of SSH keys, e.g.:
     * ~/.ssh/personal_key and ~/.ssh/personal_key.pub
     * ~/.ssh/work_key and ~/.ssh/work_key.pub

   Now add the SSH keys to their corresponding GitLab accounts.
Configure SSH to use the correct keys
   Now create the file ~/.ssh/config and add the following contents:

Host gitlab.com
	HostName gitlab.com
	User git
	IdentityFile ~/.ssh/personal_keyHost gitlab.com-work
	HostName gitlab.com
	User git
	IdentityFile ~/.ssh/work_key

   This tells SSH to use the ~/.ssh/personal_key identity by default when interacting with gitlab.com,
   unless the host used is "gitlab.com-work" in which case the ~/.ssh/work_key identity will be used.

   The value for the Host directive can actually be anything, I'm just following a naming convention of
   {original-host}-{username} to make it more memorable.

Cloning repositories
   When cloning repositories from the work account, you'll need to modify the URL's host to match the
   value in the SSH config's Host directive. For example:
# Before
$> git clone git@gitlab.com:work/repository.git

# After
$> git clone git@gitlab.com-work:work/repository.git

Updating existing repositories
   If you already have a local copy of the repository and you want to update their remotes to point to
   your remote work repository, you can do so by updating the remote's URL like so (assuming your
   remote's name is origin):
$> git remote set-url origin git@gitlab.com-work:work/repository.git

Set local git configs
   When making commits, git will look at the configs to determine the name and email that it will use as
   the commit's author. This will most likely end up being your global git config. To override the
   global config on a per-project basis, you can do:
$> cd work-repository
$> git config user.name "Work Account"
$> git config user.email "work@email.com"

   Notice the absence of the --global flag. These configs will only be set inside repository in which
   they were executed. When moving to other repositories, their local git configs (or the global config
   if no local config is set) will be used. This will keep you from having to modify your global git
   config every time you go inside a git repository.

   Update Dec 12, 2017 11:02 am: As pointed out by Mary Louise Hermosa in the responses, an
   alternative approach to setting local git configs is to use "Conditional Includes". To use it,
   you need to add the following snippet to your ~/.gitconfig file:

[includeIf "gitdir:/path/to/work-repository/"]
	[user]
		name = Work Account
		email = work@email.com

   This dynamically adds/removes git configs based on which git repository you are on. An advantage of
   this is that you can manage git configs for different projects in one central location, the
   ~/.gitconfig file.


---
[**1]

https://medium.com/uncaught-exception/setting-up-multiple-github-accounts-the-nicer-way-5ab732078a7e

Setting up multiple GitHub accounts, the nicer way
Mar 7, 2019

   We previously wrote about setting up multiple GitLab accounts, which works by relying mostly on SSH
   config files and using custom hosts as remotes for git repositories.

   The previous setup works, but I find it inconvenient having to use custom hosts when cloning
   repositories or for git remotes all the time, like:
$> git clone git@gitlab.com-work:work/repository.git

   I recently (almost) had to deal with the same scenario, on GitHub this time (hence the title), so I
   decided to check if I can achieve a better setup. Turns out that there's a better way to do it - one
   that does not rely on custom hosts or modifying any SSH config file.

   In this article, we are going to assume that we have two GitHub accounts, personal@email.com and
   work@email.com. When working on work-related projects we want to commit and push our changes using
   our work account, while using our personal account for everything else.

   We're also going to assume that we've already defined global configs telling git to use our personal
   account. See [https://help.github.com/en/articles/setting-your-username-in-git]this guide on how to do that.

Generate SSH keys for each user
   GitHub does not allow us to use the same SSH key in multiple accounts, so we'll have to create
   separate keys for each account. We can create SSH keys and add them to our SSH agent by following
   [https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/]this guide from 
   the GitHub Documentation.

   Once we're done, we will have two sets of SSH keys, e.g.:
     * ~/.ssh/id_rsa and ~/.ssh/id_rsa.pub (let's use this for our personal account)
     * ~/.ssh/work_key and ~/.ssh/work_key.pub

   Now add the SSH keys to their corresponding GitHub accounts.
   [https://help.github.com/en/articles/adding-a-new-ssh-key-to-your-github-account]This guide shows us how
   to do that.

Committing as the correct user
   We then modify our ~/.gitconfig file to use our work account when we are inside a work-related
   repository. We are going to use "Conditional Includes" for that, which dynamically adds/removes
   configuration based on certain conditions. Let's add the following snippet to our ~/.gitconfig file:

[includeIf "gitdir:/path/to/work/repository/"]
	[user]
		email = "work@email.com"

   This makes git override our global configs and use work@email.com when committing changes inside the
   work repository. When in any other repository, our personal account will be used.

Do this for all work repositories
   The way I personally structure my repositories on my file system is I place all work-related
   repositories inside the ~/work directory. This makes it easier to enable the configs above for all
   work-related repositories by just using the work directory in the includeIf directive:
[includeIf "gitdir:~/work/"]

Pushing as the correct user
   When we push our commits now, they will be pushed to our personal GitHub account, even though we've
   already committed them using our work email. That's because under the hood, git uses SSH, and SSH
   uses the id_rsa key by default. So when GitHub receives the push, it will try to determine which user
   pushed the commits based on the SSH key used, which will turn out to be our personal account.

   We can resolve this by using the work_key SSH key when pushing to our work repositories. In SSH, this
   can be done through the -i flag, like so:
$> ssh -i ~/.ssh/work_key ...

   We can configure git to use a custom SSH command like above by setting core.sshCommand. And since we
   only want to set it when we're inside any work repository, we also conditionally include it inside
   the includeIf directive:

[includeIf "gitdir:/path/to/work/repository/"]
	[user]
		email = "work@email.com"
	[core]
		sshCommand = "ssh -i ~/.ssh/work_key"

   These configs now make git commit using our work email, as well as make GitHub associate commits with
   our work account when we push them ðŸŽ‰.

Summary
   We've managed to configure git to use different configs when committing and associating these commits
   to different GitHub accounts when pushing, based on what repository we are performing those changes -
   and we used conditional includes in git's config file to achieve that.

   I like this way better than the previous setup since it's more convenient to use (no more custom
   hosts) and all the config changes only affect git (no more changing of SSH config files).


---

